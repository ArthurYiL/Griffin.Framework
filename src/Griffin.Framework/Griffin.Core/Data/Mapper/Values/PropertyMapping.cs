using System;
using System.Data;

namespace Griffin.Data.Mapper.Values
{
    /// <summary>
    ///     Used to convert the database column value and assign it to the property/field in the entity.
    /// </summary>
    public class PropertyMapping<TEntity> : IPropertyMapping
    {
        private ValueHandler _columnToPropertyAdapter;
        private Func<TEntity, object> _getter;
        private object _nullValue;
        private bool _nullValueIsSet;
        private ValueHandler _propertyToColumnAdapter;
        private Action<TEntity, object> _setter;

        /// <summary>
        ///     Initializes a new instance of the <see cref="PropertyMapping{TEntity}" /> class.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="setter">The setter (optional)</param>
        /// <param name="getter">The getter (optional)</param>
        /// <exception cref="System.ArgumentNullException">propertyName</exception>
        /// <example>
        ///     <code>
        /// var mapping = new PropertyMapping("Id", (instance, value) =&gt; ((User)instance).Id = (string)value);
        /// </code>
        /// </example>
        public PropertyMapping(string propertyName, Action<TEntity, object> setter, Func<TEntity, object> getter)
        {
            if (propertyName == null) throw new ArgumentNullException("propertyName");

            _setter = setter;
            _getter = getter;
            PropertyName = propertyName;
            ColumnName = propertyName;
            ColumnToPropertyAdapter = value => value;
            PropertyToColumnAdapter = value => value;
            if (propertyName.Equals("id", StringComparison.OrdinalIgnoreCase))
                IsPrimaryKey = true;
        }

        internal ColumnToPropertyValueHandler ColumnToPropertyAdapter2 { get; set; }

        internal PropertyToColumnValueHandler<TEntity> PropertyToColumnAdapter2 { get; set; }

        /// <summary>
        ///     Gets or sets the type of the property.
        /// </summary>
        public Type PropertyType { get; set; }

        /// <summary>
        ///     Column can be null
        /// </summary>
        public bool IsNullable { get; set; }

        /// <summary>
        ///     Value to assign to the property if the column is <c>DBNull</c>.
        /// </summary>
        /// <remarks>
        ///     <para>
        ///         Will also assign <c>DBNull</c> to the column if the read property is this value.
        ///     </para>
        /// </remarks>
        public object NullValue
        {
            get => _nullValue;
            set
            {
                IsNullable = true;
                _nullValue = value;
                _nullValueIsSet = true;
            }
        }

        /// <summary>
        ///     Determines if this property can be written to
        /// </summary>
        public bool CanWrite => _setter != null;

        /// <summary>
        ///     Determines if this property can be read
        /// </summary>
        public bool CanRead => _getter != null;

        /// <summary>
        ///     This property is a primary key
        /// </summary>
        public bool IsPrimaryKey { get; set; }

        /// <summary>
        ///     PK value is generated by the DB, i.e. do not insert it.
        /// </summary>
        public bool IsAutoIncrement { get; set; }

        /// <summary>
        ///     Name of the property in the entity
        /// </summary>
        public string PropertyName { get; set; }

        /// <summary>
        ///     Set if the column name is different from the property name
        /// </summary>
        public string ColumnName { get; set; }

        /// <summary>
        ///     Used to convert the database value to the type used by the property
        /// </summary>
        [Obsolete("Use GetPropertyValue instead.")]
        public ValueHandler ColumnToPropertyAdapter
        {
            get => _columnToPropertyAdapter;
            set
            {
                if (value == null)
                    _columnToPropertyAdapter = x => x;
                else
                    _columnToPropertyAdapter = value;
            }
        }

        /// <summary>
        ///     Used to convert the property to the type used by the column.
        /// </summary>
        [Obsolete("Use GetColumnValue for access")]
        public ValueHandler PropertyToColumnAdapter
        {
            get => _propertyToColumnAdapter;
            set
            {
                if (value == null)
                    _propertyToColumnAdapter = x => x;
                else
                    _propertyToColumnAdapter = value;
            }
        }

        /// <summary>
        ///     Convert the value in the specified record and assign it to the property in the specified instance
        /// </summary>
        /// <param name="source">Database record</param>
        /// <param name="destination">Entity instance</param>
        /// <remarks>
        ///     <para>Will exit the method without any assignment if the value is <c>DBNull.Value</c>.</para>
        /// </remarks>
        void IPropertyMapping.Map(IDataRecord source, object destination)
        {
            if (!CanWrite)
                return;

            var value = source[ColumnName];


            try
            {
                var adapted = ConvertColumnValueToPropertyValue(value, source);
                if (value == DBNull.Value)
                {
                    if (!IsNullable || !_nullValueIsSet)
                        return;
                    adapted = NullValue;
                }

                _setter((TEntity) destination, adapted);
            }
            catch (IndexOutOfRangeException ex)
            {
                throw new MappingException(typeof(TEntity),
                    "Property " + typeof(TEntity) + "." + PropertyName + " cannot be mapped since column '" +
                    ColumnName + "' do not exist.", ex);
            }
            catch (Exception exception)
            {
                throw new MappingException(typeof(TEntity),
                    string.Format(
                        "Property {0}.{1} cannot be converted from column value column value type '{2}' to property type '{3}'.",
                        typeof(TEntity), PropertyName, value.GetType().FullName, PropertyType), exception);
            }
        }

        object IPropertyMapping.GetValue(object entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            if (!CanRead)
                throw new MappingException(typeof(TEntity), "Property '" + PropertyName + "' is not readable.");

            var value = _getter((TEntity) entity);
            if (IsNullable && value != null && value.Equals(NullValue))
                value = DBNull.Value;

            if (PropertyToColumnAdapter2 != null)
            {
                var ctx = new PropertyToColumnValueContext<TEntity>(value, (TEntity) entity);
                value = PropertyToColumnAdapter2(ctx);
            }
            else if (_propertyToColumnAdapter != null)
                value = _propertyToColumnAdapter(value);

            return value;
        }

        /// <summary>
        ///     Set property value by specifying a column value (i.e. use the <c>ColumnToPropertyAdapter</c> when assigning the
        ///     value)
        /// </summary>
        /// <param name="entity">Entity to retrieve value from</param>
        /// <param name="columnValue">Column value</param>
        /// <returns>Property value</returns>
        /// <remarks>
        ///     <para>
        ///         Will attempt to convert the value if it's not directly assignable to the property type.
        ///     </para>
        /// </remarks>
        public void SetProperty(object entity, object columnValue)
        {
            if (!CanWrite)
                throw new MappingException(typeof(TEntity), "Property '" + PropertyName + "' is not writable.");

            var adapted = ConvertColumnValueToPropertyValue(columnValue, null);
            if (adapted == DBNull.Value)
            {
                if (!IsNullable || !_nullValueIsSet)
                    return;

                adapted = NullValue;
            }

            if (!PropertyType.IsInstanceOfType(adapted))
                adapted = Convert.ChangeType(adapted, PropertyType);
            _setter((TEntity) entity, adapted);
        }


        public object GetPropertyValue(IDataRecord record)
        {
            var value = record[ColumnName];

            var context = new ColumnToPropertyValueContext(typeof(TEntity), value, record);
            if (ColumnToPropertyAdapter2 != null)
                return ColumnToPropertyAdapter2(context);

            if (_columnToPropertyAdapter != null)
                return _columnToPropertyAdapter(value);

            return value;
        }

        /// <summary>
        ///     Convert the value in the specified record and assign it to the property in the entity.
        /// </summary>
        /// <param name="source">Database record</param>
        /// <param name="destination">Entity instance</param>
        /// <remarks>
        ///     <para>Will exit the method without any assignment if the value is <c>DBNull.Value</c>.</para>
        /// </remarks>
        public void Map(IDataRecord source, TEntity destination)
        {
            if (!CanWrite)
                return;

            var value = source[ColumnName];
            var adapted = ConvertColumnValueToPropertyValue(value, source);
            if (value == DBNull.Value)
            {
                if (NullValue != null)
                    adapted = NullValue;
                else
                    return;
            }

            _setter(destination, adapted);
        }

        /// <summary>
        ///     Ignore this property in insert/update statements.
        /// </summary>
        /// <exception cref="System.InvalidOperationException">Must always write keys.</exception>
        public void NotForCrud()
        {
            if (IsPrimaryKey)
                throw new InvalidOperationException("Must always be able to read keys. Property: " + PropertyName);

            _getter = null;
        }

        /// <summary>
        ///     Ignore this column when reading from the DB.
        /// </summary>
        /// <exception cref="System.InvalidOperationException">Must always write keys.</exception>
        public void NotForQueries()
        {
            if (IsPrimaryKey)
                throw new InvalidOperationException(
                    "Primary key properties must be writable. Property: " + PropertyName);

            _setter = null;
        }

        private object ConvertColumnValueToPropertyValue(object columnValue, IDataRecord record)
        {
            var adapted = columnValue;
            if (ColumnToPropertyAdapter2 != null)
            {
                var ctx = new ColumnToPropertyValueContext(typeof(TEntity), columnValue, record);
                adapted = ColumnToPropertyAdapter2(ctx);
            }
            else if (_columnToPropertyAdapter != null)
                adapted = _columnToPropertyAdapter(columnValue);

            return adapted;
        }
    }
}